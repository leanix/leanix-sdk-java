/*
 * LeanIX Pathfinder REST API
 * Core application for storage and analysis of IT landscape data
 *
 * OpenAPI spec version: 5.0.396
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.leanix.api.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import net.leanix.api.models.ChartConfig;

/**
 * Chart
 */

public class Chart {
  @JsonProperty("title")
  private String title = null;

  @JsonProperty("chartProduct")
  private String chartProduct = null;

  @JsonProperty("config")
  private ChartConfig config = null;

  @JsonProperty("forReporting")
  private Boolean forReporting = false;

  @JsonProperty("isStacked")
  private Boolean isStacked = false;

  public Chart title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Chart chartProduct(String chartProduct) {
    this.chartProduct = chartProduct;
    return this;
  }

   /**
   * Get chartProduct
   * @return chartProduct
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getChartProduct() {
    return chartProduct;
  }

  public void setChartProduct(String chartProduct) {
    this.chartProduct = chartProduct;
  }

  public Chart config(ChartConfig config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(example = "null", value = "")
  public ChartConfig getConfig() {
    return config;
  }

  public void setConfig(ChartConfig config) {
    this.config = config;
  }

  public Chart forReporting(Boolean forReporting) {
    this.forReporting = forReporting;
    return this;
  }

   /**
   * Get forReporting
   * @return forReporting
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getForReporting() {
    return forReporting;
  }

  public void setForReporting(Boolean forReporting) {
    this.forReporting = forReporting;
  }

  public Chart isStacked(Boolean isStacked) {
    this.isStacked = isStacked;
    return this;
  }

   /**
   * Get isStacked
   * @return isStacked
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getIsStacked() {
    return isStacked;
  }

  public void setIsStacked(Boolean isStacked) {
    this.isStacked = isStacked;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chart chart = (Chart) o;
    return Objects.equals(this.title, chart.title) &&
        Objects.equals(this.chartProduct, chart.chartProduct) &&
        Objects.equals(this.config, chart.config) &&
        Objects.equals(this.forReporting, chart.forReporting) &&
        Objects.equals(this.isStacked, chart.isStacked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, chartProduct, config, forReporting, isStacked);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chart {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    chartProduct: ").append(toIndentedString(chartProduct)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    forReporting: ").append(toIndentedString(forReporting)).append("\n");
    sb.append("    isStacked: ").append(toIndentedString(isStacked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

